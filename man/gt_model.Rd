% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gt_model.R
\name{gt_model}
\alias{gt_model}
\title{Generates a table from model results using the \code{gt} library.}
\usage{
gt_model(
  models,
  digits = 3,
  sig_thresh = 0.05,
  var_labels = c(`(Intercept)` = "Intercept", n = "N"),
  summary_stats = NULL,
  beside = FALSE
)
}
\arguments{
\item{models}{a \code{list} of models, of either the \code{lm} or \code{glm} command.}

\item{digits}{a numeric value indicating the number of decimals to round results to}

\item{sig_thresh}{a numeric value indicating the threshold for statistical significance
for the asterisk. If NULL, asterisks will not be printed.}

\item{var_labels}{a named character vector indicating labels for the rows. Names should
be the actual row names and values should be the labels desired.}

\item{summary_stats}{a character vector indicating desired summary statistics. See below
for a list of available options.}

\item{beside}{A logical indicating whether to show the parenthetical value
on the same row (TRUE) or a separate row (FALSE; default).}
}
\value{
\code{gt_model} returns a \code{gt_tbl} object that can be further processed using
various commands from the \link{gt} package.
}
\description{
\code{gt_model} outputs a list of models as a \link{gt} table for display in Quarto,
R Markdown, or other formats.
}
\details{
This function can be used to create a \link{gt} table of model (i.e. regression) results
using a format common in many scientific fields. Multiple models can be included in the table
by feeding in a list of model objects. The most common intended use of this function is within
a Quarto document where the output will be displayed nicely in the final output.
Currently the following models are verified to work:
\itemize{
\item \link{lm}
\item \link{glm}
}

Because the returned object is a \code{gt_tbl}, it can be further refined to the user's
tastes by piping it into subsequent \link{gt} commands.

The returned table uses a "stub" column for the variable label and summary statistics labels. All
model columns will be named as \code{modelX} where X is the index of the model (e.g. model1, model2).
Users can rename the models with a \code{cols_label} command. Variables and summary statistics
can be renamed by the \code{var_labels} argument which takes a named character vector that
provides the correspondence between original and new variable names (see examples below).

All rows have a label prefix that can be used to identify sets of rows or particular rows.
Each row label begins with either "coef:", "se:", or "summary:" depending on whether it is
a model coefficient, standard error, or summary statistic. This is followed by either the
name of the variable in R or the name of the summary statistic. These labels will still apply
even if the \code{var_labels} argument has been used for different labeling in the printed table.
User can use this to access specific rows or types of rows. For example, to change the
rounding on all coefficient values:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{ gt_model(...) |>
   fmt_number(rows=matches("^coef:"), decimals=5)
}\if{html}{\out{</div>}}
}
\examples{
if (require("gt")) {
  model1 <- lm(mpg ~ hp, data = mtcars)
  model2 <- update(model1, . ~ . + disp + wt)
  model3 <- update(model2, . ~ . + as.factor(cyl))

  name_corr <- c("Intercept" = "Constant",
                 "hp" = "Horsepower",
                 "disp" = "Displacement (cu. in.)",
                 "wt" = "Weight (1000 lbs)",
                 "as.factor\\\\(cyl\\\\)6" = "6-cylinder",
                 "as.factor\\\\(cyl\\\\)8" = "8-cylinder",
                 "rsquared" = "R-squared",
                 "bic" = "BIC")

  gt_model(list(model1, model2, model3), var_labels = name_corr,
           summary_stats = c("rsquared", "bic")) |>
    cols_label(model1 = "(1)", model2 = "(2)", model3 = "(3)") |>
    fmt_number(rows = c("summary:bic"), decimals = 1) |>
    tab_source_note(md("*Notes:* Standard errors shown in parenthesis.")) |>
    tab_options(table.width = "100\%")
}
}
